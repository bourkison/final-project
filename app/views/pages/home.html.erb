<h1>Ubog</h1>

<div class="container">
  <% if @current_user.present? %>
    <p>Welcome back, <%= @current_user.name %></p>
    <div class="bookingCreate">
      <h3>Find a Dog Walker!</h3>
      <input type="text" id="bookingAddress" placeholder="Address. Leave blank for home address."/>
      <button class="bookButton">Book Dog Walk!</button>
      <div id="bookingSuccess"></div>
    </div>

    <div class="tripCreate">
      <h3>Walk Some Dogs!</h3>
      <input type="text" id="tripAddress" placeholder="Starting address. Leave blank for home address."/>
      <button class="tripButton">Find Dogs To Walk!</button>
      <div id="tripSuccess"></div>
    </div>
  <% end %>
</div>


<div id="map"></div>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBknCH8ac7AiYxL-9HQkKTT8KGKGydC7LU&libraries=places&callback=initMap" async defer></script>

<script>
  // CODE FOR MAP:
  var addr;
  var initMap = function() {
    addr = {
      lat: -33.8688,
      lng: 151.2093
    };

    // Create a map object and specify the DOM element for display.
    var map = new google.maps.Map($("#map")[0], {
      center: addr,
      zoom: 15
    });


    <% if @current_user.present? %>
      addr.lat = <%= @current_user.latitude %>;
      addr.lng = <%= @current_user.longtitude %>;
      map.setCenter(addr);

      var homeMarker = new google.maps.Marker({
        position: addr,
        map: map,
        title: 'Home'
      });



      // CODE FOR AUTOCOMPLETE:
      var addressObj = {
        lat: 0,
        lng: 0,
        address: ''
      };

      // Autocomplete box
      var defaultBounds = new google.maps.LatLngBounds(
        new google.maps.LatLng(-35, 150),
        new google.maps.LatLng(-33, 152)
      );

      var $bookingInput = $("#bookingAddress");
      var $tripInput = $("#tripAddress");

      var options = {
        bounds: defaultBounds,
        types: ['address']
      };

      var bookingAutocomplete = new google.maps.places.Autocomplete($bookingInput[0], options);
      var tripAutocomplete = new google.maps.places.Autocomplete($tripInput[0], options);



      bookingAutocomplete.addListener('place_changed', function() {
        googObj = bookingAutocomplete.getPlace();
        addressObj.address = googObj.formatted_address;
        addressObj.lat = googObj.geometry.location.lat();
        addressObj.lng = googObj.geometry.location.lng();
      });

      tripAutocomplete.addListener('place_changed', function() {
        googObj = tripAutocomplete.getPlace();
        addressObj.address = googObj.formatted_address;
        addressObj.lat = googObj.geometry.location.lat();
        addressObj.lng = googObj.geometry.location.lng();
        console.log(addressObj);
      });



      // CODE FOR ADDING A BOOKING.
      $('.bookButton').click(function(e) {
        e.preventDefault();

        $('.tripCreate').css('display', 'none');

        if (addressObj.address === '') {
          addressObj.lat = <%= @current_user.latitude %>;
          addressObj.lng = <%= @current_user.longtitude %>;
          addressObj.address = "<%= @current_user.address %>";
        }


        $.ajax({
          url: '/bookings',
          method: 'POST',
          data: { booking: {
            address: addressObj.address,
            latitude: addressObj.lat,
            longtitude: addressObj.lng
          }},
          success: function() {
            $("#bookingSuccess").html("<p>Booking successfully made. Finding dog walker...</p>");
            console.log("Booking created!");
          },
          error: function( e ){
            debugger
          }
        });
      });


      var distances = [];
      var geocodePromises = [];
      var locations = [];
      var bookings = [];
      var origin;
      var tripInfo;
      // tripWaypoint is a number which keeps track of which step the dog walker is up to.
      var tripWaypoint = 0;


      // CODE FOR ADDING A TRIP AND FINDING BOOKINGS.
      $('.tripButton').click(function(e) {
        e.preventDefault();

        $('.bookingCreate').css('display', 'none');

        if (addressObj.address === '') {
          addressObj.lat = <%= @current_user.latitude %>;
          addressObj.lng = <%= @current_user.longtitude %>;
          addressObj.address = "<%= @current_user.address %>";
        }

        $.ajax({
          url: '/trips',
          method: 'POST',
          dataType: 'json',
          data: { trip: {
            address: addressObj.address,
            latitude: addressObj.lat,
            longtitude: addressObj.lng
          }},
          // The AJAX request will return a list of all the bookings
          success: function(response) {
            bookings = response.bookings;
            origin = { lat: addressObj.lat, lng: addressObj.lng };
            var destinations = [];
            for (var i = 0; i < bookings.length; i++) {
              destinations.push({ lat: bookings[i].latitude, lng: bookings[i].longtitude });
            }
            // Make an array of objects which will have an address key and distance key to better associate the 2.
            distances = [];


            // Use Google Maps Distance Matrix API to get the distances between all the bookings and this trip.
            var distanceService = new google.maps.DistanceMatrixService;

            distanceService.getDistanceMatrix({
              origins: [origin],
              destinations: destinations,
              travelMode: 'WALKING'
            }, function(response, status) {
              for (var i = 0; i < response.destinationAddresses.length; i++) {
                distances.push({
                  address: response.destinationAddresses[i],
                  distance: response.rows[0].elements[i].distance.value
                });
              }
              // It would seem as though the API returns the distances sorted, but just to double check let's chuck a function in to do it.
              distances = distances.sort(function(a, b) {
                return a.distance - b.distance;
              });

              // Now let's drop the array to have only the closest 3 bookings.
              while (distances.length > 3) {
                distances.pop();
              }

              locations = [];
              geocodePromises = [];

              var geocoder = new google.maps.Geocoder();
              // Now let's geocode and add a marker at each of these locations!
              for (var i = 0; i < distances.length; i++) {
                geocoder.geocode({ 'address': distances[i].address }, function(geoResult, geoStatus) {
                  locations.push ({
                    lat: geoResult[0].geometry.location.lat(),
                    lng: geoResult[0].geometry.location.lng()
                  });
                  continueTripSetup();
                });
              }
            });
          },
          error: function(e) {
            debugger
          }
        });
      });

      var continueTripSetup = function() {
        // As this function is being called several times, let's back out until all the Geocodes are done.
        if (locations.length !== distances.length) {
          return;
        }

        var waypoints = [];
        for (i = 0; i < locations.length; i++) {
          waypoints.push({
            location: locations[i],
            stopover: true
          });
        }

        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer;

        directionsDisplay.setMap(map);

        // We want to find the closest park and add that as our destination.
        var placesService = new google.maps.places.PlacesService(map);

        placesService.nearbySearch({
          location: locations[locations.length - 1],
          radius: 1000,
          type: ['park']
        }, function(parkResults, parkStatus) {
          var destination = {
            lat: parkResults[0].geometry.location.lat(),
            lng: parkResults[0].geometry.location.lng()
          }

          directionsService.route({
            origin: origin,
            destination: destination,
            waypoints: waypoints,
            travelMode: 'WALKING',
            optimizeWaypoints: true
          }, function(response, status) {
            tripInfo = response;
            // Now let's get rid of the home marker.
            homeMarker.setMap(null);
            directionsDisplay.setDirections(response);
            var route = response.routes[0];
            printDirectionInstructions();
          });
        });


      }

      var printDirectionInstructions = function() {

        var infoString = "<ul>";
        var temp = tripInfo.routes[0].legs[tripWaypoint];
        for (i = 0; i < temp.steps.length; i ++) {
          infoString += "<li>" + temp.steps[i].instructions + "</li>"
        }
        infoString += "</ul>"

        if (tripWaypoint !== tripInfo.routes[0].legs.length - 1) {
          infoString += "<button id='nextStop'>Next Step</button>"
        }
        // Let's give the user the information, then add a button to get them to the next step.
        $("#tripSuccess").html(infoString);

        $("#nextStop").click(nextStopFunc);
      }

      var nextStopFunc = function(e) {
        e.preventDefault();
        tripWaypoint++;
        printDirectionInstructions();
      };
   <% end %>
  }



</script>
